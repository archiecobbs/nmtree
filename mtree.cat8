MTREE(8)                NetBSD System Manager's Manual                MTREE(8)

NNAAMMEE
     mmttrreeee -- map a directory hierarchy

SSYYNNOOPPSSIISS
     mmttrreeee [--ccCCddDDeellLLMMPPrruuUUWWxx] [--ii | --mm] [--ff _s_p_e_c] [--pp _p_a_t_h] [--kk _k_e_y_w_o_r_d_s]
           [--KK _k_e_y_w_o_r_d_s] [--RR _k_e_y_w_o_r_d_s] [--EE _t_a_g_s] [--II _t_a_g_s] [--NN _d_b_d_i_r]
           [--ss _s_e_e_d] [--XX _e_x_c_l_u_d_e_-_f_i_l_e]

DDEESSCCRRIIPPTTIIOONN
     The mmttrreeee utility compares the file hierarchy rooted in the current
     directory against a specification read from the standard input.  Messages
     are written to the standard output for any files whose characteristics do
     not match the specification, or which are missing from either the file
     hierarchy or the specification.

     The options are as follows:

     --cc    Print a specification for the file hierarchy to the standard out-
           put.

     --dd    Ignore everything except directory type files.

     --CC    Print (`dump') the specification as provided by --ff _s_p_e_c in a format
           that's easier to parse with various tools.  The full path name is
           always printed as the first field, and --kk, --KK, and --RR can be used
           to control which other keywords are printed, and --EE and --II can be
           used to control which files are printed.

     --DD    As per --CC, except that the path name is always printed as the last
           field instead of the first.

     --EE _t_a_g_s
           Add the comma separated tags to the ``exclusion'' list.  Non-direc-
           tories with tags which are in the exclusion list are not printed
           with --DD.

     --ee    Don't complain about files that are in the file hierarchy, but not
           in the specification.

     --ff _s_p_e_c
           Read the specification from _f_i_l_e, instead of from the standard
           input.

     --II _t_a_g_s
           Add the comma separated tags to the ``inclusion'' list.  Non-direc-
           tories with tags which are in the inclusion list are printed with
           --DD.  If no inclusion list is provided, the default is to display
           all files.

     --ii    If specified, set the schg and/or sappnd flags.

     --KK _k_e_y_w_o_r_d_s
           Add the specified (whitespace or comma separated) keywords to the
           current set of keywords.  If `all' is specified, add all of the
           other keywords.

     --kk _k_e_y_w_o_r_d_s
           Use the ttyyppee keyword plus the specified (whitespace or comma sepa-
           rated) keywords instead of the current set of keywords.  If `all'
           is specified, use all of the other keywords.  If the ttyyppee keyword
           is not desired, suppress it with --RR _t_y_p_e.

     --ll    Do ``loose'' permissions checks, in which more stringent permis-
           sions will match less stringent ones. For example, a file marked
           mode 0444 will pass a check for mode 0644.  ``Loose'' checks apply
           only to read, write and execute permissions -- in particular, if
           other bits like the sticky bit or suid/sgid bits are set either in
           the specification or the file, exact checking will be performed.
           This flag may not be set at the same time as the --uu or --UU flags.

     --LL    Follow all symbolic links in the file hierarchy.

     --mm    If the schg and/or sappnd flags are specified, reset these flags.
           Note that this is only possible with securelevel less than 1 (i.e.
           in single user mode or while the system is running in insecure
           mode). See init(8) for information on security levels.

     --MM    Permit merging of specification entries with different types, with
           the last entry take precedence.

     --NN _d_b_d_i_r
           Use the user database text file _m_a_s_t_e_r_._p_a_s_s_w_d and group database
           text file _g_r_o_u_p from _d_b_d_i_r, rather than using the results from the
           system's getpwnam(3) and getgrnam(3) (and related) library calls.

     --pp _p_a_t_h
           Use the file hierarchy rooted in _p_a_t_h, instead of the current
           directory.

     --PP    Don't follow symbolic links in the file hierarchy, instead consider
           the symbolic link itself in any comparisons.  This is the default.

     --rr    Remove any files in the file hierarchy that are not described in
           the specification.

     --RR _k_e_y_w_o_r_d_s
           Remove the specified (whitespace or comma separated) keywords from
           the current set of keywords.  If `all' is specified, remove all of
           the other keywords.

     --ss _s_e_e_d
           Display a single checksum to the standard error output that repre-
           sents all of the files for which the keyword cckkssuumm was specified.
           The checksum is seeded with the specified value.

     --uu    Modify the owner, group, permissions, and flags of existing files,
           the device type of devices, and symbolic link targets, to match the
           specification.  Create any missing directories, devices or symbolic
           links.  User, group, and permissions must all be specified for
           missing directories to be created.  Note that unless the --ii option
           is given, the schg and sappnd flags will not be set, even if speci-
           fied. If --mm is given, these flags will be reset.  Exit with a sta-
           tus of 0 on success, 2 if the file hierarchy did not match the
           specification, and 1 if any other error occurred.

     --UU    Same as --uu except that a mismatch is not considered to be an error
           if it was corrected.

     --WW    Don't attempt to set various file attributes such as the ownership,
           mode, flags, or time when creating new directories or changing
           existing entries.  This option will be most useful when used in
           conjunction with --uu or --UU.

     --xx    Don't descend below mount points in the file hierarchy.

     --XX _e_x_c_l_u_d_e_-_f_i_l_e
           The specified file contains fnmatch(3) patterns matching files to
           be excluded from the specification, one to a line.  If the pattern
           contains a `/' character, it will be matched against entire path-
           names (relative to the starting directory); otherwise, it will be
           matched against basenames only.  Comments are permitted in the
           _e_x_c_l_u_d_e_-_l_i_s_t file.

     Specifications are mostly composed of ``keywords'', i.e. strings that
     that specify values relating to files.  No keywords have default values,
     and if a keyword has no value set, no checks based on it are performed.

     Currently supported keywords are as follows:

     cckkssuumm   The checksum of the file using the default algorithm specified by
             the cksum(1) utility.

     ddeevviiccee  The device number to use for bblloocckk or cchhaarr file types.  The argu-
             ment must be one of the following forms:

             _f_o_r_m_a_t,_m_a_j_o_r,_m_i_n_o_r
                   A device with _m_a_j_o_r and _m_i_n_o_r fields, for an operating sys-
                   tem specified with _f_o_r_m_a_t.  See below for valid formats.

             _f_o_r_m_a_t,_m_a_j_o_r,_u_n_i_t,_s_u_b_u_n_i_t
                   A device with _m_a_j_o_r, _u_n_i_t, and _s_u_b_u_n_i_t fields, for an oper-
                   ating system specified with _f_o_r_m_a_t.  (Currently this is
                   only supported by the bbssddooss format.)

             _n_u_m_b_e_r
                   Opaque number (as stored on the file system).

             The following values for _f_o_r_m_a_t are recognized: nnaattiivvee, 338866bbssdd,
             44bbssdd, bbssddooss, ffrreeeebbssdd, hhppuuxx, iisscc, lliinnuuxx, nneettbbssdd, oossff11, ssccoo,
             ssoollaarriiss, ssuunnooss, ssvvrr33, ssvvrr44, and uullttrriixx.

             See mknod(8) for more details.

     ffllaaggss   The file flags as a symbolic name.  See chflags(1) for informa-
             tion on these names.  If no flags are to be set the string `none'
             may be used to override the current default.  Note that the schg
             and sappnd flags are treated specially (see the --ii and --mm
             options).

     iiggnnoorree  Ignore any file hierarchy below this file.

     ggiidd     The file group as a numeric value.

     ggnnaammee   The file group as a symbolic name.

     lliinnkk    The file the symbolic link is expected to reference.

     mmdd55     The MD5 cryptographic message digest of the file.

     mmdd55ddiiggeesstt
             Synonym for mmdd55.

     mmooddee    The current file's permissions as a numeric (octal) or symbolic
             value.

     nnlliinnkk   The number of hard links the file is expected to have.

     ooppttiioonnaall
             The file is optional; don't complain about the file if it's not
             in the file hierarchy.

     rrmmdd116600  The RMD-160 cryptographic message digest of the file.

     rrmmdd116600ddiiggeesstt
             Synonym for rrmmdd116600.

     sshhaa11    The SHA-1 cryptographic message digest of the file.

     sshhaa11ddiiggeesstt
             Synonym for sshhaa11.

     sshhaa225566  The 256-bits SHA-2 cryptographic message digest of the file.

     sshhaa225566ddiiggeesstt
             Synonym for sshhaa225566.

     sshhaa338844  The 384-bits SHA-2 cryptographic message digest of the file.

     sshhaa338844ddiiggeesstt
             Synonym for sshhaa338844.

     sshhaa551122  The 512-bits SHA-2 cryptographic message digest of the file.

     sshhaa551122ddiiggeesstt
             Synonym for sshhaa551122.

     ssiizzee    The size, in bytes, of the file.

     ttaaggss    Comma delimited tags to be matched with --EE and --II.  These may be
             specified without leading or trailing commas, but will be stored
             internally with them.

     ttiimmee    The last modification time of the file.

     ttyyppee    The type of the file; may be set to any one of the following:

             bblloocckk   block special device
             cchhaarr    character special device
             ddiirr     directory
             ffiiffoo    fifo
             ffiillee    regular file
             lliinnkk    symbolic link
             ssoocckkeett  socket

     uuiidd     The file owner as a numeric value.

     uunnaammee   The file owner as a symbolic name.

     The default set of keywords are ffllaaggss, ggiidd, lliinnkk, mmooddee, nnlliinnkk, ssiizzee,
     ttiimmee, ttyyppee, and uuiidd.

     There are four types of lines in a specification:

     1.   Set global values for a keyword.  This consists of the string `/set'
          followed by whitespace, followed by sets of keyword/value pairs,
          separated by whitespace.  Keyword/value pairs consist of a keyword,
          followed by an equals sign (`='), followed by a value, without
          whitespace characters.  Once a keyword has been set, its value
          remains unchanged until either reset or unset.

     2.   Unset global values for a keyword.  This consists of the string
          `/unset', followed by whitespace, followed by one or more keywords,
          separated by whitespace.  If `all' is specified, unset all of the
          keywords.

     3.   A file specification, consisting of a path name, followed by white-
          space, followed by zero or more whitespace separated keyword/value
          pairs.

          The path name may be preceded by whitespace characters.  The path
          name may contain any of the standard path name matching characters
          (`[', `]', `?' or `*'), in which case files in the hierarchy will be
          associated with the first pattern that they match.  mmttrreeee uses
          strsvis(3) (in VIS_CSTYLE format) to encode path names containing
          non-printable characters. Whitespace characters are encoded as `\s'
          (space), `\t' (tab), and `\n' (new line).  `#' characters in path
          names are escaped by a preceding backslash `\' to distinguish them
          from comments.

          Each of the keyword/value pairs consist of a keyword, followed by an
          equals sign (`='), followed by the keyword's value, without white-
          space characters.  These values override, without changing, the
          global value of the corresponding keyword.

          The first path name entry listed must be a directory named `.', as
          this ensures that intermixing full and relative path names will work
          consistently and correctly.  Multiple entries for a directory named
          `.' are permitted; the settings for the last such entry override
          those of the existing entry.

          A path name that contains a slash (`/') that is not the first char-
          acter will be treated as a full path (relative to the root of the
          tree).  All parent directories referenced in the path name must
          exist.  The current directory path used by relative path names will
          be updated appropriately.  Multiple entries for the same full path
          are permitted if the types are the same (unless --MM is given, and
          then the types may differ); in this case the settings for the last
          entry take precedence.

          A path name that does not contain a slash will be treated as a rela-
          tive path.  Specifying a directory will cause subsequent files to be
          searched for in that directory hierarchy.

     4.   A line containing only the string `..' which causes the current
          directory path (used by relative paths) to ascend one level.

     Empty lines and lines whose first non-whitespace character is a hash mark
     (`#') are ignored.

     The mmttrreeee utility exits with a status of 0 on success, 1 if any error
     occurred, and 2 if the file hierarchy did not match the specification.

FFIILLEESS
     /etc/mtree  system specification directory

EEXXAAMMPPLLEESS
     To detect system binaries that have been ``trojan horsed'', it is recom-
     mended that mmttrreeee be run on the file systems, and a copy of the results
     stored on a different machine, or, at least, in encrypted form.  The seed
     for the --ss option should not be an obvious value and the final checksum
     should not be stored on-line under any circumstances!  Then, periodi-
     cally, mmttrreeee should be run against the on-line specifications and the
     final checksum compared with the previous value.  While it is possible
     for the bad guys to change the on-line specifications to conform to their
     modified binaries, it shouldn't be possible for them to make it produce
     the same final checksum value.  If the final checksum value changes, the
     off-line copies of the specification can be used to detect which of the
     binaries have actually been modified.

     The --dd and --uu options can be used in combination to create directory
     hierarchies for distributions and other such things.

SSEEEE AALLSSOO
     chflags(1), chgrp(1), chmod(1), cksum(1), stat(2), fnmatch(3), fts(3),
     strsvis(3), chown(8), mknod(8)

HHIISSTTOORRYY
     The mmttrreeee utility appeared in 4.3BSD-Reno.  The ooppttiioonnaall keyword appeared
     in NetBSD 1.2.  The --UU flag appeared in NetBSD 1.3.  The ffllaaggss and mmdd55
     keywords, and --ii and --mm flags appeared in NetBSD 1.4.  The ddeevviiccee,
     rrmmdd116600, sshhaa11, ttaaggss, and aallll keywords, --DD, --EE, --II, --ll, --LL, --NN, --PP, --RR, --WW,
     and --XX flags, and support for full paths appeared in NetBSD 1.6.  The
     sshhaa225566, sshhaa338844, and sshhaa551122 keywords appeared in NetBSD 3.0.

NetBSD 3.0                    September 12, 2006                    NetBSD 3.0
